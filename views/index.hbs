<img src="images/RoToJa_Logo.png" alt="...">
<div class="row">
  <div class="col-sm-3 col-md-4">
    <div class="thumbnail">
      <div class="caption">
        <h3>Join A Room!</h3>
        <style>
            .videoContainer {
                position: relative;
                width: 200px;
                height: 150px;
            }
            .videoContainer video {
                position: absolute;
                width: 100%;
                height: 100%;
            }
            .volume_bar {
                position: absolute;
                width: 5px;
                height: 0px;
                right: 0px;
                bottom: 0px;
                background-color: #12acef;

            .connectionstate {
                position: absolute;
                top: 0px;
                width: 100%;
                text-align: center;
                color: #fff
            }
            }
        </style>
        <p id="subTitle"></p>
        <form id="createRoom">
          <input id="sessionInput"/></br>
          <p><p><button type="submit" class="btn btn-primary">Join</button></p></p>
        </form>
        <div class="videoContainer">
            <video id="localVideo" autoplay style="height: 150px;" oncontextmenu="return false;"></video>
            <div id="localVolume" class="volume_bar"></div>
        </div>
        <p><p><button id="screenShareButton" type= "submit" class="btn btn-default"></button></p></p>
      </div>
    </div>
  </div>
      <div class="col-sm-3 col-md-4">
        <div class="thumbnail">
          <div class= "caption" id="remotes">
            <label for ="remotes">Other People in this Room:</label>
            <p></p>
          </div>
        </div>
      </div>
</div>


            <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
            <script src="./javascripts/SimpleWebRTC/simplewebrtc.bundle.js"></script>
            <script>
                // grab the room from the URL
                var room = location.search && location.search.split('?')[1];
                // create our webrtc connection
                var webrtc = new SimpleWebRTC({
                    // the id/element dom element that will hold "our" video
                    localVideoEl: 'localVideo',
                    // the id/element dom element that will hold remote videos
                    remoteVideosEl: '',
                    // immediately ask for camera access
                    autoRequestMedia: true,
                    debug: false,
                    detectSpeakingEvents: true
                });

                // when it's ready, join if we got a room from the URL
                webrtc.on('readyToCall', function () {
                    // you can name it anything
                    if (room) webrtc.joinRoom(room);
                });

                function showVolume(el, volume) {
                    if (!el) return;
                    if (volume < -45) { // vary between -45 and -20
                        el.style.height = '0px';
                    } else if (volume > -20) {
                        el.style.height = '100%';
                    } else {
                        el.style.height = '' + Math.floor((volume + 100) * 100 / 25 - 220) + '%';
                    }
                }
                webrtc.on('channelMessage', function (peer, label, data) {
                    if (data.type == 'volume') {
                        showVolume(document.getElementById('volume_' + peer.id), data.volume);
                    }
                });
                webrtc.on('videoAdded', function (video, peer) {
                    console.log('video added', peer);
                    var remotes = document.getElementById('remotes');
                    if (remotes) {
                        var d = document.createElement('div');
                        d.className = 'videoContainer';
                        d.id = 'container_' + webrtc.getDomId(peer);
                        d.appendChild(video);
                        var vol = document.createElement('div');
                        vol.id = 'volume_' + peer.id;
                        vol.className = 'volume_bar';
                        video.onclick = function () {
                            video.style.width = video.videoWidth + 'px';
                            video.style.height = video.videoHeight + 'px';
                        };
                        d.appendChild(vol);
                        remotes.appendChild(d);

                        // show the ice connection state
                        if (peer && peer.pc) {
                            var connstate = document.createElement('div');
                            connstate.className = 'connectionstate';
                            container.appendChild(connstate);
                            peer.pc.on('iceConnectionStateChange', function (event) {
                                switch (peer.pc.iceConnectionState) {
                                case 'checking':
                                    connstate.innerText = 'Connecting to peer...';
                                    break;
                                case 'connected':
                                case 'completed': // on caller side
                                    connstate.innerText = 'Connection established.';
                                    break;
                                case 'disconnected':
                                    connstate.innerText = 'Disconnected.';
                                    break;
                                case 'failed':
                                    break;
                                case 'closed':
                                    connstate.innerText = 'Connection closed.';
                                    break;
                                }
                            });
                        }
                    }
                });
                webrtc.on('videoRemoved', function (video, peer) {
                    console.log('video removed ', peer);
                    var remotes = document.getElementById('remotes');
                    var el = document.getElementById(peer ? 'container_' + webrtc.getDomId(peer)
                  :'localScreenContainer');
                    if (remotes && el) {
                        remotes.removeChild(el);
                    }
                });
                webrtc.on('volumeChange', function (volume, treshold) {
                    //console.log('own volume', volume);
                    showVolume(document.getElementById('localVolume'), volume);
                });

                // Since we use this twice we put it here
                function setRoom(name) {
                    $('form').remove();
                    $('h1').text(name);
                    $('#subTitle').text('Link to join: '+ location.href);
                    $('body').addClass('active');
                }

                if (room) {
                    setRoom(room);
                    console.log("Room: " + room)
                } else {
                    $('form').submit(function () {
                        var val = $('#sessionInput').val().toLowerCase().replace(/\s/g, '-').replace(/[^A-Za-z0-9_\-]/g, '');
                        webrtc.createRoom(val, function (err, name) {
                            console.log(' create room cb', arguments);

                            var newUrl = location.pathname + '?' + name;
                            if (!err) {
                                history.replaceState({foo: 'bar'}, null, newUrl);
                                setRoom(name);
                            } else {
                                console.log(err);
                            }
                        });
                        return false;
                    });
                }

                var button = $('#screenShareButton'),
                    setButton = function (bool) {
                        button.text(bool ? 'Share Screen' : 'stop sharing');
                    };
                webrtc.on('localScreenStopped', function () {
                    setButton(true);
                });

                setButton(true);

                button.click(function () {
                    if (webrtc.getLocalScreen()) {
                        webrtc.stopScreenShare();
                        setButton(true);
                    } else {
                        webrtc.shareScreen(function (err) {
                            if (err) {
                                setButton(true);
                            } else {
                                setButton(false);
                            }
                        });

                    }
                });
                // local p2p/ice failure
                webrtc.on('iceFailed', function (peer) {
                    var connstate = document.querySelector('#container_' + webrtc.getDomId(peer) + ' .connectionstate');
                    console.log('local fail', connstate);
                    if (connstate) {
                        connstate.innerText = 'Connection failed.';
                        fileinput.disabled = 'disabled';
                    }
                });

                // remote p2p/ice failure
                webrtc.on('connectivityError', function (peer) {
                    var connstate = document.querySelector('#container_' + webrtc.getDomId(peer) + ' .connectionstate');
                    console.log('remote fail', connstate);
                    if (connstate) {
                        connstate.innerText = 'Connection failed.';
                        fileinput.disabled = 'disabled';
                    }
                });

            </script>
